
// Input data:
$columns: 12;
$columns_gap: 15;
$container_width: 1400;
// $column_name: 'ds_';
$breakpoints_between: 'responsive'; // 'responsive' || 'fixed'. When responsive - 'container_max' don't use.


$modules_display: ( 
    block: 1,
    inline-block: 0,
    flex: 1
);


$devices: ( 
    mv_: (
        breakpoint: 320,
        container_max: 300,
        font_base: 15px,
        ms_coeff: 1.10,
    ),
    mh_: (
        breakpoint: 576,
        container_max: 540,
        font_base: 15px,
        ms_coeff: 1.10,
    ),
    tb_: (
        breakpoint: 768,
        container_max: 750,
        font_base: 15px,
        ms_coeff: 1.17,
    ), 
    ds_: (
        breakpoint: 1024,
        container_max: 960,
        font_base: 15px,
        ms_coeff: 1.17
    ),
    hd_: (
        breakpoint: 1440,
        container_max: 1400,
        font_base: 15px,
        ms_coeff: 1.17
    )      
);



/* 1. Structure elements */

.section{
    width: 100%;
    float: left; width: 100%; clear: both;
}
.container{    
    max-width: $container_width+px;
    padding-left: $columns_gap+px;
    padding-right: $columns_gap+px;
    margin: 0 auto; box-sizing: border-box;    position: relative;
}


/* 2. Modules display */

/* Block  model */
@if map-get($modules_display, block) == 1 {
    .row{
        margin-left: -$columns_gap+px;
        margin-right: -$columns_gap+px;
    }

    .row>div{ float : left; }
}
/* Inline-block  model */
@if map-get($modules_display, inline-block) == 1 {
    .row-line{
        margin-left: -$columns_gap+px;
        margin-right: -$columns_gap+px; 
        font-size: 0;
    }

    .row-line>div{ float : none; display : inline-block;}

    .row-line.middle>div{ vertical-align : middle;  }
    .row-line.top>div{ vertical-align : top; }
    .row-line.bottom>div{ vertical-align : bottom; }
    .row-line.baseline>div{ vertical-align : baseline; }

    .row-line.row-reverse{ direction : rtl; }
    .row-line.row-reverse>div{ direction : ltr; }    
}
/* Flex  model */
@if map-get($modules_display, flex) == 1 {
    .row-flex{
        display: flex; flex-wrap: wrap;
        margin-left: -$columns_gap+px;
        margin-right: -$columns_gap+px;    
    }

    .row-flexbox{ display : flex; margin-left: -$columns_gap+px; margin-right: -$columns_gap+px; } 
    [class*=row-flex].middle{ align-items : center; }
    [class*=row-flex].top{ align-items : flex-start; }
    [class*=row-flex].bottom{ align-items : flex-end; }
    [class*=row-flex].baseline{ align-items : baseline; }
    [class*=row-flex].stretch{ align-items : stretch; }

    .row-flex.row-reverse{ flex-direction: row-reverse; }
}




/* 3. Columns */

/* 3. Columns v.2 */




@each $device_name, $device_obj in $devices {

    @media (min-width : #{map-get($device_obj, breakpoint)}px) {

        // between points : Container max-width
        @if $breakpoints_between == 'fixed' {
            .container{
                max-width: map-get($device_obj, container_max)+px;
            }
        }

        // columns offset reset
        .#{$device_name}offset_0 { 
            margin-left:  0;
        }

        // columns width and offset
        $i: 1;
        @while $i < ($columns + 1) {

            .#{$device_name}#{$i} {

                $width: $i / $columns;
                width: $width * 100%;
            }

            .#{$device_name}offset_#{$i} {

                $width: $i / $columns;
                margin-left:  $width * 100%;
            }            

            $i: $i + 1;

        }

    }

    
}

/* 
@function set_container_max_width($max_width) {

    .container{
        max-width: map-get($device_obj, container_max)+px;
    }

    @return 1;
}
 */

// @each $animal in puma, sea-slug, egret, salamander {
//   .#{$animal}-icon {
//     background-image: url('/images/#{$animal}.png');
//   }
// }


// @each $key, $value in $colorMap {
//   .color--#{$key} {
//     color: #{$value};
//   }
// }




[class*="hd_"],
[class*="ds_"],
[class*="tb_"],
[class*="mh_"],
[class*="mv_"]
{ 
    box-sizing : border-box; 
    padding-left: $columns_gap+px;
    padding-right: $columns_gap+px;
    position : relative; 
    min-height : 1px;
}



/* 4. Вспомогательные структурные элементы */

.container:before,
.container:after,
.row:before,
.row:after
{
    display: table;
    content: " "; box-sizing: border-box;
}
.container:after, 
.row:after
{
    clear : both;
}




/* 4. Утилиты адаптации  */


// v2

/* Скрываем на больших, на малых показываем */

@each $device_name, $device_obj in $devices {

    $hidden_breakpoint: map-get($device_obj, breakpoint)+0px;
    @media  (min-width : $hidden_breakpoint ) {
        body .#{$device_name}hidden {
            display: none;
        }

    }

    $hidden_breakpoint: map-get($device_obj, breakpoint)-1px;
    @media  (max-width : $hidden_breakpoint ) {

        body .#{$device_name}visible {
            display: none;
        }

    } 

    
}


/* 5. Text utulites  */

    .lefted{ text-align : left; }
    .righted{ text-align : right; }
    .centered{ text-align : center; }
    .justifyed{ text-align : justify; }


@each $device_name, $device_obj in $devices {

    @media (min-width : #{map-get($device_obj, breakpoint)}px) {

        .#{$device_name}lefted{ text-align : left; }
        .#{$device_name}righted{ text-align : right; }
        .#{$device_name}centered{ text-align : center; }
        .#{$device_name}justifyed{ text-align : justify; }

    }

}
